{"version":3,"sources":["logo.svg","useIntersectionObserver.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","useIntersectionObserver","ref","_ref","threshold","root","rootMargin","_useState","useState","inView","triggered","entry","undefined","_useState2","Object","slicedToArray","state","setState","observer","IntersectionObserver","entries","observerInstance","intersectionRatio","unobserve","current","useEffect","observe","App","elementRef","useRef","_useIntersectionObser","_useIntersectionObser2","console","log","react_default","a","createElement","className","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oNCE3BC,eAA0B,SACrCC,EADqCC,GAGlC,IADDC,EACCD,EADDC,UAAWC,EACVF,EADUE,KAAMC,EAChBH,EADgBG,WAChBC,EAEuBC,mBAAS,CACjCC,QAAQ,EACRC,WAAW,EACXC,WAAOC,IALNC,EAAAC,OAAAC,EAAA,EAAAD,CAAAP,EAAA,GAEIS,EAFJH,EAAA,GAEWI,EAFXJ,EAAA,GAQGK,EAAW,IAAIC,qBACnB,SAACC,EAASC,GAEJD,EAAQ,GAAGE,kBAAoB,IAEjCL,EAAS,CACPR,QAAQ,EACRC,WAAW,EACXC,MAAOU,IAGTA,EAAiBE,UAAUrB,EAAIsB,WAInC,CACEpB,UAAWA,GAAa,EACxBC,KAAMA,GAAQ,KACdC,WAAYA,GAAc,OAW9B,OAPAmB,oBAAU,WAEJvB,EAAIsB,UAAYR,EAAMN,WACxBQ,EAASQ,QAAQxB,EAAIsB,WAIlB,CAACR,EAAMP,OAAQO,EAAML,SCGfgB,MAtCf,WACE,IAAMC,EAAaC,iBAAO,MADbC,EAEW7B,EAAwB2B,EAAY,CAC1DxB,UAAW,IAHA2B,EAAAjB,OAAAC,EAAA,EAAAD,CAAAgB,EAAA,GAENrB,EAFMsB,EAAA,GAEEpB,EAFFoB,EAAA,GAUb,OAJAN,oBAAU,WACRO,QAAQC,IAAIxB,IACX,CAACE,EAAOF,IAGTyB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCN,EAAAC,EAAAC,cAAA,iBACOF,EAAAC,EAAAC,cAAA,0BADP,wBAGAF,EAAAC,EAAAC,cAAA,KACEC,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,gBASFT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAEjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWnC,IAAK0B,GAC5BnB,GAAUyB,EAAAC,EAAAC,cAAA,6BC1BDQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1bb109bf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { useState, useEffect } from \"react\";\n\nexport const useIntersectionObserver = (\n  ref,\n  { threshold, root, rootMargin }\n) => {\n  // configure the state\n  const [state, setState] = useState({\n    inView: false,\n    triggered: false,\n    entry: undefined\n  });\n\n  const observer = new IntersectionObserver(\n    (entries, observerInstance) => {\n      // checks to see if the element is intersecting\n      if (entries[0].intersectionRatio > 0) {\n        // if it is update the state, we set triggered as to not re-observe the element\n        setState({\n          inView: true,\n          triggered: true,\n          entry: observerInstance\n        });\n        // unobserve the element\n        observerInstance.unobserve(ref.current);\n      }\n      return;\n    },\n    {\n      threshold: threshold || 0,\n      root: root || null,\n      rootMargin: rootMargin || \"0%\"\n    }\n  );\n\n  useEffect(() => {\n    // check that the element exists, and has not already been triggered\n    if (ref.current && !state.triggered) {\n      observer.observe(ref.current);\n    }\n  });\n\n  return [state.inView, state.entry];\n};\n","import React, { useRef, useEffect } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport \"intersection-observer\";\n\nimport { useIntersectionObserver } from \"./useIntersectionObserver\";\n\nfunction App() {\n  const elementRef = useRef(null);\n  const [inView, entry] = useIntersectionObserver(elementRef, {\n    threshold: 0\n  });\n\n  useEffect(() => {\n    console.log(inView);\n  }, [entry, inView]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n      <div className=\"full-height one\">\n        <div className=\"item-one\" />\n      </div>\n      <div className=\"full-height two\">\n        <div className=\"item-two\" ref={elementRef}>\n          {inView && <p>I'm in view!</p>}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}